Autogenerated file - May 08, 2019


// Program
using System;
using System.Collections.Generic;
using System.Linq;
using Solucion_Habitacional.Servicio;

namespace Solucion_Habitacional
{
    class Program
    {
        static ServicePasante wcfPasante = new ServicePasante();
        static ServicioBarrio wcfBarrio = new ServicioBarrio();
        static ServicioParametro wcfParametro = new ServicioParametro();
        static ServicioVivienda wcfVivienda = new ServicioVivienda();

        static Boolean autenticado = false;
        static DtoPasante pasante = null;

        static void Main(string[] args)
        {
            int opcion = -1;
            do
            {
                DibujarMenu();

                opcion = LeerOpcion();

                if (autenticado && opcion == 0)
                {  
                    opcion = -1;
                }

                ProcesarMenu(opcion);

            } while (opcion != 0);

            Console.WriteLine("\nFin del programa.");

            PararPantalla();
        }


        #region PASANTE
        private static void Ingresar(Boolean salt = false)
        {
            Boolean canceled = false;
            String user_name = "", password = "";

            Console.WriteLine("\nIngresar");

            while (!autenticado && !canceled)
            {
                if (pasante == null)
                {
                    user_name = (String)CompleteField("Email", true);

                    canceled = user_name == "-1";

                    if (canceled)
                    {
                        CanceledOperation();
                    }
                    else
                    {
                        password = (String)CompleteField("Contraseña", false);

                        pasante = new DtoPasante
                        {
                            user_name = user_name,
                            password = password
                        };
                    }
                }

                if (pasante != null)
                {
                    autenticado = wcfPasante.Ingresar(pasante);
                    
                    if (!autenticado)
                    {
                        pasante = null;
                    }

                    if (!salt)
                    {
                        EvaluateOperation(autenticado, "Ingreso", "usuario", "nombre de usuario", true, true, true, true);
                    }
                }
            }
        }

        private static void AgregarPasante()
        {
            Boolean added = false, canceled = false;
            String name = "", password1 = "a", password2 = "b";

            Console.WriteLine("\nRegistrarme");


            while (!added && !canceled && password1 != password2)
            {
                name = (String)CompleteField("Email", true);
                canceled = name == "-1";

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    password1 = (String)CompleteField("Contraseña", false);
                    password2 = (String)CompleteField("Contraseña", false);

                    if (password1 != password2)
                    {
                        Console.WriteLine("\nLas contrasenas no coinciden, intente de nuevo!\n\n");
                    }
                    else
                    {
                        pasante = new DtoPasante
                        {
                            user_name = name,
                            password = password2
                        };

                        added = wcfPasante.Agregar(name, password2);

                        EvaluateOperation(added, "Registro", "usuario", "email", false, true, true, true);

                        if (!added)
                        {
                            password1 = "a";
                            password2 = "b";
                        }
                        else
                        {
                            Ingresar(true);
                        }
                    }
                }
            }
        }

        private static void ModificarPasante()
        {
            Boolean modified = false, canceled = false;
            String password1 = "a", password2 = "b";


            Console.WriteLine("\nCambiar Contrasena");

            while (!modified && !canceled && password1 != password2)
            {

                password1 = (String)CompleteField("Contraseña", true);

                canceled = password1 == "-1";

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    password2 = (String)CompleteField("Contraseña", false);

                    if (password1 != password2)
                    {
                        Console.WriteLine("\nLas contrasenas no coinciden, intente de nuevo!\n\n");
                    }
                    else
                    {
                        pasante = new DtoPasante
                        {
                            user_name = pasante.user_name,
                            password = password2
                        };

                        modified = wcfPasante.Modificar(pasante.user_name, password2);

                        if (!modified)
                        {
                            password1 = "a";
                            password2 = "b";
                        }

                        EvaluateOperation(modified, "Modificación", "usuario", "contraseña", true, false, true, false);

                    }
                }
            }

        }

        private static void EliminarPasante()
        {
            Boolean deleted = false, canceled = false;
            String password = "";

            Console.WriteLine("\nDarme de Baja");

            while (!deleted && !canceled)
            {
                password = (String)CompleteField("Contraseña", true);

                canceled = password == "-1";

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    pasante = new DtoPasante
                    {
                        user_name = pasante.user_name,
                        password = password
                    };

                    deleted = wcfPasante.Eliminar(pasante);

                    EvaluateOperation(deleted, "Eliminación", "usuario", "contrsaeña", true, false, true, false);

                    if (deleted)
                    {
                        autenticado = false;
                        pasante = null;
                    }

                }
            }
        }
        #endregion

        #region PARAMETRO

        private static void AgregarParametro()
        {
            Boolean added = false, canceled = false;
            String name = "", valor = "";

            Console.WriteLine("\nAgregar un Parámetro");

            while (!added && !canceled)
            {
                name = (String) CompleteField("Nombre", true);

                canceled = name == "-1";

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    valor = (String) CompleteField("Valor", false);

                    added = wcfParametro.Agregar(name, valor);

                    EvaluateOperation(added, "Ingreso", "parámetro", "nombre", false, true, true, true);

                }
            }
        }

        private static void ModificarParametro()
        {
            Boolean modified = false, canceled = false;
            String name = "", valor = "";

            Console.WriteLine("\nModificar Parámetro");

            while (!modified && !canceled)
            {
                name = (String) CompleteField("Nombre", true);

                canceled = name == "-1";

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    valor = (String) CompleteField("Valor", false);

                    modified = wcfParametro.Modificar(name, valor);

                    EvaluateOperation(modified, "Modificación", "parámetro", "nombre", true, false, true, true);

                }
            }
        }

        private static void EliminarParametro()
        {
            Boolean deleted = false, canceled = false;
            String name = "";

            Console.WriteLine("\nEliminar un Parámetro");

            while (!deleted && !canceled)
            {
                name = (String) CompleteField("Nombre", true);

                canceled = name == "-1";

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    deleted = wcfParametro.Eliminar(name);

                    EvaluateOperation(deleted, "Eliminación", "parámetro", "nombre", true, false, true, true);

                }
            }
        }

        private static void ListarParametros()
        {
            Console.WriteLine("\nListar Parametros");
            var lista = wcfParametro.ObtenerTodos();
            MostrarLista(lista);
            PararPantalla();
        }

        private static void ListarParametro()
        {
            Boolean founded = false, canceled = false;
            String name = "";
            DtoParametro p = null;

            while (!founded && !canceled && p == null)
            {
                name = (String) CompleteField("Nombre", true);

                canceled = name == "-1";

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    p = wcfParametro.GetParametro(name);

                    if (p != null)
                    {
                        Console.WriteLine("\n\tSe ha encontrado 1 parámetro: " + p.ToString());
                    }
                    else
                    {
                        Console.WriteLine("\n\tNo se ha encontrado nungún parámetro con el nombre: " + name);
                    }

                    PararPantalla();
                }
            }
        }

        private static void GenerarReporteParametro()
        {
            Console.WriteLine("\nGenerar Reporte de Parametros");
            Boolean generado = wcfParametro.GenerateReport();

            if (generado)
            {
                Console.WriteLine("\nGenerado exitosamente!");
            }
            else
            {
                Console.WriteLine("\nOooops! Ha ocurrido un error");
            }

            PararPantalla();
        }

        #endregion

        #region BARRIO
        private static void AgregarBarrio()
        {
            Boolean added = false, canceled = false;
            String name = "", desc = "";

            Console.WriteLine("\nAgregar un Barrio");

            while (!added && !canceled)
            {
                name = (String) CompleteField("Nombre", true);

                canceled = name == "-1";

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    desc = (String) CompleteField("Descripcion", false);

                    added = wcfBarrio.Agregar(name, desc);

                    EvaluateOperation(added, "Ingreso", "barrio", "nombre", false, true, true, true);

                }
            }
        }

        private static void ListarBarrios(Boolean cont = true)
        {
            Console.WriteLine("\nListar Barrios");

            var lista = wcfBarrio.ObtenerTodos();

            MostrarLista(lista);

            if (cont)
            {
                PararPantalla();
            }
        }

        private static void ListarBarrio()
        {
            Boolean founded = false, canceled = false;
            String name = "";
            DtoBarrio b = null;

            while (!founded && !canceled && b == null)
            {
                name = (String) CompleteField("Nombre", true);

                canceled = name == "-1";

                if (canceled)
                {
                    CanceledOperation();
                } else
                {
                    b = wcfBarrio.GetBarrio(name);
                    if (b != null)
                    {
                        Console.WriteLine("\n\tSe ha encontrado el barrio: \n\t\t" + b.ToString());
                    } else
                    {
                        Console.WriteLine("\n\tNo se ha encontrado nungún barrio con el nombre: " + name);
                    }
                    
                    PararPantalla();
                    
                }
            }

        }

        private static void ModificarBarrio()
        {
            Boolean modified = false, canceled = false;
            String name = "", desc = "";

            Console.WriteLine("\nModificar Barrio");

            while (!modified && !canceled)
            {
                name = (String) CompleteField("Nombre", true);

                canceled = name == "-1";

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    desc = (String) CompleteField("Descripcion", false);

                    modified = wcfBarrio.Modificar(name, desc);
                    
                    EvaluateOperation(modified, "Modificación", "barrio", "nombre", true, false, true, true);

                }
            }

        }

        private static void EliminarBarrio()
        {
            Boolean deleted = false, canceled = false;
            String name = "";

            Console.WriteLine("\nEliminar un Barrio");

            while (!deleted && !canceled)
            {
                name = (String) CompleteField("Nombre", true);

                canceled = name == "-1";

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    deleted = wcfBarrio.Eliminar(name);

                    EvaluateOperation(deleted, "Eliminación", "barrio", "nombre", true, false, true, true);

                }
            }
        }

        private static void GenerarReporteBarrio()
        {
            Console.WriteLine("\nGenerar Reporte de Barrios");
            Boolean generado = wcfBarrio.GenerateReport();

            if (generado)
            {
                Console.WriteLine("\nGenerado exitosamente!");
            }
            else
            {
                Console.WriteLine("\nOooops! Ha ocurrido un error");
            }

            PararPantalla();
        }

        #endregion

        #region VIVIENDA
        private static void AgregarVivienda()
        {
            Boolean added = false, canceled = false;

            int current_year = DateTime.Now.Year;
            int anio_es_nueva = Convert.ToInt16(wcfParametro.GetParametro("anio_nueva").value) | 2;

            String calle = "", descripcion = "";
            DtoBarrio barrio = null;
            int nro_puerta = 0, nro_banios = 0, nro_dormitorios = 0, anio_construccion = 0;
            double superficie = 0.0, precio_base = 0.0;
            Boolean vendida = false, habilitada = false, intenta_ser_nueva = false;

            Console.WriteLine("\nAgregar una Vivienda");

            while (!added && !canceled)
            {
                calle = (String) CompleteField("Calle", true);
                canceled = calle == "-1";

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                   
                    nro_puerta = Convert.ToInt32(CompleteField("Número de puerta", false, "Int"));

                    nro_banios = Convert.ToInt32(CompleteField("Cantidad de baños", false, "Int"));

                    nro_dormitorios = Convert.ToInt32(CompleteField("Cantidad de dormitorios", false, "Int"));

                    anio_construccion = Convert.ToInt32(CompleteField("Año de construcción", false, "Int"));

                    superficie = Convert.ToDouble(CompleteField("Superficie en m2", false, "Double"));

                    intenta_ser_nueva = current_year - anio_construccion < anio_es_nueva;

                    if (intenta_ser_nueva)
                    {
                        Console.Write("\nEl precio es en Unidades Indexadas");
                    } else
                    {
                        Console.Write("\nEl precio es en Dólares");
                    }

                    precio_base = Convert.ToDouble(CompleteField("Precio base", false, "Double"));

                    habilitada = Convert.ToBoolean(CompleteField("Está habilitada? [s --> Si, n --> No]", false, "Boolean"));

                    if (habilitada)
                    {
                        vendida = Convert.ToBoolean(CompleteField("Está vendida? [s --> Si, n --> No]", false, "Boolean"));
                    }

                    descripcion = (String)CompleteField("Descripcion", false);

                    barrio = (DtoBarrio) CompleteField("Nombre del barrio", false, "DtoBarrio");

                    
                    added = wcfVivienda.Agregar(calle, nro_puerta, barrio, descripcion, nro_banios,
                            nro_dormitorios, superficie, precio_base, anio_construccion, vendida,
                            habilitada, intenta_ser_nueva);
                    
                    if (added)
                    {
                        Console.WriteLine("Ingreso correcto");
                    } else
                    {
                        Console.WriteLine("Ingreso incorrecto, Vuelva a intentarlo");
                    }

                    PararPantalla();
                }
            }
        }

        private static void ListarViviendas()
        {
            Console.WriteLine("\nListar Viviendas");
            var lista = wcfVivienda.FindAll();
            MostrarLista(lista);
            PararPantalla();
        }

        private static void ListarVivienda()
        {
            Boolean founded = false, canceled = false;
            String name = "";
            DtoBarrio b = null;



            while (!founded && !canceled && b == null)
            {
                name = (String)CompleteField("Nombre del barrio", true);

                canceled = name == "-1";

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    b = wcfBarrio.GetBarrio(name);

                    if (b != null)
                    {
                        MostrarLista(wcfVivienda.GetViviendas(b));
                    }
                    else
                    {
                        Console.WriteLine("\n\tNo se ha encontrado nungún barrio con el nombre: " + name);
                    }

                    PararPantalla();
                }
            }

        }

        private static void ModificarVivienda()
        {
            Boolean modified = false, canceled = false;
            int id = -1;

            Console.WriteLine("\nModificar Vivienda");

            while (!modified && !canceled)
            {
                id = (int) CompleteField("Id", true, "Int");

                canceled = id == -1;

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    DtoVivienda v = wcfVivienda.FindById(id);

                    int op = -1;

                    while (!canceled)
                    {

                        while (op < 0 || op > 11)
                        {
                            Console.WriteLine("\tCaracterística a modificar");
                            Console.WriteLine("\t[0] \t--> Salir");
                            Console.WriteLine("\t[1] \t--> Calle");
                            Console.WriteLine("\t[2] \t--> Número de puerta");
                            Console.WriteLine("\t[3] \t--> Barrio");
                            Console.WriteLine("\t[4] \t--> Descripción");
                            Console.WriteLine("\t[5] \t--> Cantidad de baños");
                            Console.WriteLine("\t[6] \t--> Cantidad de dormitorios");
                            Console.WriteLine("\t[7] \t--> Superficie");
                            Console.WriteLine("\t[8] \t--> Precio base");
                            Console.WriteLine("\t[9] \t--> Año de construcción");
                            Console.WriteLine("\t[10] \t--> Habilitación");
                            Console.WriteLine("\t[11] \t--> Vendida");

                            op = (int)CompleteField("Ingrese una opción", false, "Int");
                        }

                        if (op == 0)
                        {
                            canceled = true;
                            CanceledOperation();
                        }
                        else
                        {

                            switch (op)
                            {
                                case 1:
                                    String calle = (String)CompleteField("Calle", false);
                                    v.calle = calle;
                                    break;

                                case 2:
                                    int nro_puerta = (int)CompleteField("Número de puerta", false, "Int");
                                    v.nro_puerta = nro_puerta;
                                    break;

                                case 3:
                                    DtoBarrio barrio = (DtoBarrio)CompleteField("Barrio", false, "DtoBarrio");
                                    v.barrio = barrio;
                                    break;

                                case 4:
                                    String descripcion = (String)CompleteField("Descripcion", false);
                                    v.descripcion = descripcion;
                                    break;

                                case 5:
                                    int nro_banios = (int)CompleteField("Cantidad de baños", false, "Int");
                                    v.nro_banios = nro_banios;
                                    break;

                                case 6:
                                    int nro_dormitorios = (int)CompleteField("Cantidad de doemitorios", false, "Int");
                                    v.nro_dormitorios = nro_dormitorios;
                                    break;

                                case 7:
                                    double superficie = (double)CompleteField("Superficie en m2", false, "Double");
                                    v.superficie = superficie;
                                    break;

                                case 8:
                                    double precio_base = (double)CompleteField("Precio base", false, "Double");
                                    v.precio_base = precio_base;
                                    break;

                                case 9:
                                    int anio_construccion = (int)CompleteField("Año de construcción", false, "Int");
                                    v.anio_construccion = anio_construccion;
                                    break;

                                case 10:
                                    Boolean habilitada = (Boolean) CompleteField("Habilitada?", false, "Boolean");
                                    v.habilitada = habilitada;
                                    break;

                                case 11:
                                    if (v.habilitada)
                                    {
                                        Boolean vendida = (Boolean)CompleteField("Vendida?", false, "Boolean");
                                        v.vendida = vendida;
                                    }
                                    else
                                    {
                                        Console.WriteLine("La vivienda no esta habilitada para la venta");
                                        PararPantalla();
                                    }
                                    break;
                            }

                            modified = wcfVivienda.Modificar(v);


                            if (modified)
                            {
                                Console.WriteLine("Modificación correcta");
                            } else
                            {
                                Console.WriteLine("No se pudo modificar");
                            }

                            PararPantalla();

                            canceled = !(Boolean)CompleteField("Desea volver a modificar? [s --> Si, n --> No]", false, "Boolean");

                            op = canceled ? 0 : -1;
                        }
                    }
                }
            }

        }

        private static void EliminarVivienda()
        {
            Boolean deleted = false, canceled = false;
            int id = -1;

            Console.WriteLine("\nEliminar vivienda");

            while (!deleted && !canceled)
            {
                id = Convert.ToInt32(CompleteField("Id", true, "Int"));

                canceled = id == -1;

                if (canceled)
                {
                    CanceledOperation();
                }
                else
                {
                    DtoVivienda v = wcfVivienda.FindById(id);
                    deleted = wcfVivienda.Eliminar(v);

                    EvaluateOperation(deleted, "Eliminación", "vivienda", "id", true, false, false, true);

                }
            }
        }

        private static void GenerarReporteVivienda()
        {
            Console.WriteLine("\nGenerar Reporte de Vivienda");
            Boolean generado = wcfVivienda.GenerateReport();

            if (generado)
            {
                Console.WriteLine("\nGenerado exitosamente!");
            }
            else
            {
                Console.WriteLine("\nOooops! Ha ocurrido un error");
            }

            PararPantalla();
        }

        #endregion

        #region UTILITIES
        private static void DibujarMenu()
        {
            Console.Clear();

            if (!autenticado)
            {
                Console.WriteLine("Menú de Inicio");
                Console.WriteLine("=================");
                Console.WriteLine("0 - Salir");
                Console.WriteLine("1 - Ingresar");
                Console.WriteLine("2 - Registrarme");
            }
            else
            {
                Console.WriteLine("======== Menú de Opciones ========");
                Console.WriteLine("==================================");
                Console.WriteLine("0 - Salir");
                Console.WriteLine("============= BARRIO =============");
                Console.WriteLine("1 - Agregar Barrio");
                Console.WriteLine("2 - Modificar Barrio");
                Console.WriteLine("3 - Listar Barrios");
                Console.WriteLine("4 - Eliminar Barrio");
                Console.WriteLine("5 - Buscar Barrio por Nombre");
                Console.WriteLine("6 - Generar Reporte de Barrios");
                Console.WriteLine("==================================");
                Console.WriteLine("============ VIVIENDA ============");
                Console.WriteLine("7 - Agregar Vivienda");
                Console.WriteLine("8 - Modificar Vivienda");
                Console.WriteLine("9 - Listar Viviendas");
                Console.WriteLine("10 - Eliminar Vivienda");
                Console.WriteLine("11 - Buscar Vivienda por Barrio");
                Console.WriteLine("12 - Generar Reporte de Vivienda");
                Console.WriteLine("==================================");
                Console.WriteLine("============ PARAMETRO ===========");
                Console.WriteLine("13 - Agregar Parametro");
                Console.WriteLine("14 - Modificar Parametro");
                Console.WriteLine("15 - Listar Parametros");
                Console.WriteLine("16 - Eliminar Parametro");
                Console.WriteLine("17 - Buscar Parametro por Nombre");
                Console.WriteLine("18 - Generar Reporte de Parametros");
                Console.WriteLine("==================================");
                Console.WriteLine("============= PASANTE ============");
                Console.WriteLine("19 - Cambiar contrasena");
                Console.WriteLine("20 - Darme de Baja");
                Console.WriteLine("==================================");
            }

            Console.WriteLine("");
            Console.WriteLine("Ingrese una opción");


        }

        private static int LeerOpcion()
        {
            int tope = 20;
            int opcion = -1;
            bool esNumero = false;
            String opS;
            do
            {
                opS = Console.ReadLine();
                esNumero = int.TryParse(opS.ToString(), out opcion);
                if (!esNumero || opcion < 0 || opcion > tope)
                    Console.WriteLine("Ingrese nuevamente, la opción debe estar entre 0 y {0}", tope);
            } while (!esNumero || opcion < 0 || opcion > tope);

            return opcion;
        }

        private static void ProcesarMenu(int opcion)
        {

            switch (opcion)
            {
                case -1:
                    autenticado = false;
                    pasante = null;
                    break;

                case 1:
                    if (!autenticado)
                    {
                        Ingresar();
                    }
                    else
                    {
                        AgregarBarrio();
                    }
                    break;

                case 2:
                    if (!autenticado)
                    {
                        AgregarPasante();
                    }
                    else
                    {
                        ModificarBarrio();
                    }
                    break;

                case 3:
                    ListarBarrios();
                    break;

                case 4:
                    EliminarBarrio();
                    break;

                case 5:
                    ListarBarrio();
                    break;

                case 6:
                    GenerarReporteBarrio();
                    break;

                case 7:
                    AgregarVivienda();
                    break;

                case 8:
                    ModificarVivienda();
                    break;

                case 9:
                    ListarViviendas();
                    break;

                case 10:
                    EliminarVivienda();
                    break;

                case 11:
                    ListarVivienda();
                    break;

                case 12:
                    GenerarReporteVivienda();
                    break;

                case 13:
                    AgregarParametro();
                    break;

                case 14:
                    ModificarParametro();
                    break;

                case 15:
                    ListarParametros();
                    break;

                case 16:
                    EliminarParametro();
                    break;

                case 17:
                    ListarParametro();
                    break;

                case 18:
                    GenerarReporteParametro();
                    break;

                case 19:
                    ModificarPasante();
                    break;

                case 20:
                    EliminarPasante();
                    break;

            }

        }

        private static void PararPantalla()
        {
            Console.WriteLine("\nPresione una tecla para continuar");
            Console.ReadKey();
        }

        private static void MostrarLista(IEnumerable<Object> lista)
        {
            if (lista.Count() == 0)
            {
                Console.WriteLine("\t No se han encontrado los datos solicitados");
            } else
            {
                int i = 0;
                foreach (Object o in lista)
                {
                    i++;
                    Console.WriteLine("\t" + i + " --> " + o.ToString());
                }
            }
            
        }
        
        private static Object CompleteField(String message, Boolean salir)
        {
            String field = "";

            while (field == null || field == "")
            {

                if (salir)
                {
                    Console.WriteLine("[0 --> Salir]");
                }

                Console.WriteLine("\n" + message + ": ");
                field = Console.ReadLine();

                if (salir && field == "0")
                {
                    field = "-1";
                }
                else if (field == null || field == "")
                {
                    Console.WriteLine("\n\nOooops\n\tEl campo no puede estar vacío\n\tIngréselo nuevamente");
                }
            }
            return field;
        }

        private static Object CompleteField(String message, Boolean exit, String data_type)
        {
            Boolean converted = false;
            Object da = null;
            switch (data_type)
            {
                case "Int":
                    int i = 0;
                    while (!converted)
                    {
                        converted = int.TryParse((String)CompleteField(message, exit), out i);

                        if (!converted)
                        {
                            Console.WriteLine("\n\tEl dato no es válido\n\tIntente nuevamente!");
                        }
                    }
                    da = i;
                    break;

                case "Double":
                    double d = 0;
                    while (!converted)
                    {
                        converted = double.TryParse((String)CompleteField(message, exit), out d);

                        if (!converted)
                        {
                            Console.WriteLine("\n\tEl dato no es válido\n\tIntente nuevamente!");
                        }
                    }
                    da = d;
                    break;

                case "Boolean":
                    Boolean b = false;
                    String habilitado = "";

                    while (habilitado != "n" && habilitado != "N" && habilitado != "s" && habilitado != "S")
                    {
                        habilitado = (String) CompleteField(message, exit);

                        habilitado = (habilitado == "") ? "N" : habilitado;

                        if (habilitado != "n" && habilitado != "N" && habilitado != "s" && habilitado != "S")
                        {
                            Console.WriteLine("\n\tEl dato no es válido\n\tIntente nuevamente!");
                        }
                    }

                    b = (habilitado == "s" || habilitado == "S") ? true : !(habilitado == "n" || habilitado == "N");

                    da = b;

                    break;

                case "DtoBarrio":
                    ListarBarrios(false);

                    DtoBarrio ba = null;
                    
                    while (ba == null)
                    {
                        ba = wcfBarrio.GetBarrio((String)CompleteField(message, exit));

                        if (ba == null)
                        {
                            Console.WriteLine("\n\tEl dato no es válido\n\tIntente nuevamente!");
                        }
                    }

                    da = ba;

                    break;
            }

            return da;
        }

        private static void CanceledOperation()
        {
            Console.Clear();
            Console.WriteLine("\nOperación cancelada!");
            PararPantalla();
        }

        private static void EvaluateOperation(Boolean op, String operation, String obj, String id, Boolean exists_obj, Boolean gen_op, Boolean gen_obj, Boolean gen_id)
        {
            if (op)
            {
                Console.WriteLine("\n" + operation + " correct" + (gen_op ? "o" : "a") + "!");
                PararPantalla();
            }
            else
            {
                Console.WriteLine("\n" + operation + " incorrect" + (gen_op ? "o" : "a") + ", asegurese de que" + (exists_obj ? " " : " no ") + "exista" + (gen_obj ? " un " : " una ") + obj + " con" + (gen_id ? " el mismo " : " la misma ") + id + " y vuelva a intentarlo");
                PararPantalla();
            }
        }

        #endregion

    }
}



// App
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
    </startup>

  <connectionStrings>
    <add name="Solucion_Habitacional_P" connectionString="SERVER=IGNACIO\SQLEXPRESS; DATABASE=Solucion_Habitacional; INTEGRATED SECURITY=TRUE;"/>
  </connectionStrings>

</configuration>


// IRepositorioBarrio
using System;
using System.Collections.Generic;

namespace Solucion_Habitacional.Dominio.InterfacesRepositorio
{
    public interface IRepositorioBarrio
    {
        Boolean Add(Barrio ba);

        Boolean Delete(Barrio ba);

        Boolean Update(Barrio ba);

        Barrio FindByName(string nombre);

        IEnumerable<Barrio> FindAll();

        Boolean GenerateReports();

    }
}



// IRepositorioParametro
using System;
using System.Collections.Generic;

namespace Solucion_Habitacional.Dominio.InterfacesRepositorio
{
    public interface IRepositorioParametro
    {
        Boolean Add(Parametro p);

        Boolean Delete(Parametro p);

        Boolean Update(Parametro p);

        Parametro FindByName(string nombre);

        IEnumerable<Parametro> FindAll();

        Boolean GenerateReports();
    }
}



// IRepositorioPasante
using System;
using System.Collections.Generic;

namespace Solucion_Habitacional.Dominio.InterfacesRepositorio
{
    public interface IRepositorioPasante
    {
        Boolean Add(Pasante p);

        Boolean Delete(Pasante p);

        Boolean Update(Pasante p);

        Pasante FindByName(string nombre);

        IEnumerable<Pasante> FindAll();

        Boolean Ingresar(Pasante p);
    }
}



// IRepositorioVivienda
using System;
using System.Collections.Generic;

namespace Solucion_Habitacional.Dominio.InterfacesRepositorio
{
    public interface IRepositorioVivienda
    {
        Boolean Add(Vivienda v);

        Boolean Delete(Vivienda vi);

        Boolean Update(Vivienda vi);

        IEnumerable<Vivienda> FindByLocation(Barrio b);

        Vivienda FindById(int id);

        IEnumerable<Vivienda> FindAll();

        Boolean GenerateReports();
    }
}



// RepositorioBarrio
using System;
using System.Collections.Generic;
using Solucion_Habitacional.Dominio.Utilidades;
using System.Data.SqlClient;

namespace Solucion_Habitacional.Dominio.Repositorios.ADO
{
    public class RepositorioBarrio : InterfacesRepositorio.IRepositorioBarrio
    {
        private List<Barrio> listaBarrios = new List<Barrio>();

        public Boolean Add(Barrio ba)
        {
            return ba != null && ba.Validar() && !listaBarrios.Contains(ba) && ba.Insertar();
        }

        public Boolean Delete(Barrio ba)
        {
            return ba.Eliminar();
        }

        public Boolean Update(Barrio ba)
        {
            return ba != null && ba.Modificar();
        }

        public Barrio FindByName(string nombre)
        {
            Barrio b = null;
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                String query = @"SELECT nombre, descripcion FROM BARRIO WHERE nombre = @nombre";
                SqlCommand cmd = new SqlCommand(query, cn, trn);
                cmd.Parameters.Add(new SqlParameter("@nombre", nombre));
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        b = new Barrio
                        {
                            nombre = dr["nombre"].ToString(),
                            descripcion = dr["descripcion"].ToString()
                        };
                    }
                }
                dr.Close();
            }
            catch (SqlException e)
            {
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return b;
        }

        public IEnumerable<Barrio> FindAll()
        {
            List<Barrio> listaBarrios = new List<Barrio>();
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                String query = @"SELECT nombre, descripcion FROM BARRIO";
                SqlCommand cmd = new SqlCommand(query, cn, trn);
                SqlDataReader dr = cmd.ExecuteReader();

                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        listaBarrios.Add(new Barrio
                        {
                            nombre = dr["nombre"].ToString(),
                            descripcion = dr["descripcion"].ToString()
                        });
                    }
                }
                dr.Close();
            }
            catch (SqlException e)
            {
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return listaBarrios;
        }

        public Boolean GenerateReports()
        {
            Boolean flag = false;

            try
            {
                var lista = FindAll();
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"..\..\..\..\Archivos\Barrios.txt"))
                {
                    foreach (Barrio b in lista)
                    {
                        file.WriteLine(b.nombre + "#" + b.descripcion);
                    }
                }

                flag = true;
            }
            catch (Exception e)
            {
                flag = false;
                Console.WriteLine("Error " + e.Message);
            }
            return flag;
        }
    }
}



// RepositorioParametro
using Solucion_Habitacional.Dominio.Utilidades;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;


namespace Solucion_Habitacional.Dominio.Repositorios.ADO
{
    public class RepositorioParametro : InterfacesRepositorio.IRepositorioParametro
    {
        private List<Parametro> listaParametros = new List<Parametro>();


        public Boolean Add(Parametro p)
        {
            return p != null && p.Validar() && !listaParametros.Contains(p) && p.Insertar();
        }

        public Boolean Delete(Parametro p)
        {
            return p.Eliminar();
        }

        public IEnumerable<Parametro> FindAll()
        {
            List<Parametro> listaParametros = new List<Parametro>();
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                String query = @"SELECT nombre, valor FROM PARAMETRO";
                SqlCommand cmd = new SqlCommand(query, cn, trn);
                SqlDataReader dr = cmd.ExecuteReader();

                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        listaParametros.Add(new Parametro
                        {
                            nombre = dr["nombre"].ToString(),
                            valor = dr["valor"].ToString()
                        });
                    }
                }
                dr.Close();
            }
            catch (SqlException e)
            {
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return listaParametros;
        }

        public Parametro FindByName(string nombre)
        {
            Parametro p = null;
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                String query = @"SELECT nombre, valor FROM PARAMETRO WHERE nombre = @nombre";
                SqlCommand cmd = new SqlCommand(query, cn, trn);
                cmd.Parameters.Add(new SqlParameter("@nombre", nombre));
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        p = new Parametro
                        {
                            nombre = dr["nombre"].ToString(),
                            valor = dr["valor"].ToString()
                        };
                    }
                }
                dr.Close();
            }
            catch (SqlException e)
            {
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return p;
        }

        public Boolean GenerateReports()
        {
            Boolean flag = false;

            try
            {
                var lista = FindAll();
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"..\..\..\..\Archivos\Parametros.txt"))
                {
                    foreach (Parametro p in lista)
                    {
                        if (p.nombre != "anio_nueva")
                        {
                            file.Write(p.ToString() + "#");
                        }
                    }
                }

                flag = true;
            }
            catch (Exception e)
            {
                flag = false;
                Console.WriteLine("Error " + e.Message);
            }
            return flag;
        }

        public Boolean Update(Parametro p)
        {
            return p.Validar() && p.Modificar();
        }
    }
}



// RepositorioPasante
using System;
using System.Collections.Generic;
using Solucion_Habitacional.Dominio.Utilidades;
using System.Data.SqlClient;

namespace Solucion_Habitacional.Dominio.Repositorios.ADO
{
    public class RepositorioPasante : InterfacesRepositorio.IRepositorioPasante
    {
        private List<Pasante> listaPasante = new List<Pasante>();

        public bool Add(Pasante p)
        {
            return p != null && p.Validar() && !listaPasante.Contains(p) && p.Insertar();
        }

        public bool Delete(Pasante p)
        {
            return p != null && p.Eliminar();
        }

        public IEnumerable<Pasante> FindAll()
        {
            List<Pasante> listaPasantes = new List<Pasante>();
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                String query = @"SELECT userName FROM PASANTE";
                SqlCommand cmd = new SqlCommand(query, cn, trn);
                SqlDataReader dr = cmd.ExecuteReader();

                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        listaPasantes.Add(new Pasante
                        {
                            user_name = dr["userName"].ToString(),
                            password = ""
                        });
                    }
                }
                dr.Close();

            }
            catch (SqlException e)
            {
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return listaPasantes;
        }

        public Pasante FindByName(string username)
        {
            Pasante p = null;
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                String query = @"SELECT userName FROM PASANTE WHERE userName = @username";
                SqlCommand cmd = new SqlCommand(query, cn, trn);
                cmd.Parameters.Add(new SqlParameter("@username", username));
                p = new Pasante {
                    user_name = (String)cmd.ExecuteScalar(),
                    password = null
                };
            }
            catch (SqlException e)
            {
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return p;
        }

        public bool Update(Pasante p)
        {
            return p != null && p.Validar() && p.Modificar(); // Saco el contains p in listaPasante
        }

        public Boolean Ingresar(Pasante p)
        {
            return p.Validar() && p.Ingresar();
        }

    }
}



// RepositorioVivienda
using Solucion_Habitacional.Dominio.Utilidades;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

namespace Solucion_Habitacional.Dominio.Repositorios.ADO
{
    public class RepositorioVivienda : InterfacesRepositorio.IRepositorioVivienda
    {

        private RepositorioBarrio repoBarrio = new RepositorioBarrio();

        public Boolean Add(Vivienda v)
        {
            return v != null && v.Validar() && v.Insertar();
        }

        public Boolean Delete(Vivienda vi)
        {
            return vi != null && vi.Eliminar();
        }

        public IEnumerable<Vivienda> FindAll()
        {
            List<Vivienda> listaViviendas = new List<Vivienda>();
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                String query = @"SELECT * 
                                FROM VIVIENDA V INNER JOIN VUSADA VU ON V.id = VU.vivienda;";

                SqlCommand cmd = new SqlCommand(query, cn, trn);
                SqlDataReader dr = cmd.ExecuteReader();

                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        listaViviendas.Add(new VUsada
                        {
                            calle = dr["calle"].ToString(),
                            nro_puerta = Convert.ToInt32(dr["nro_puerta"]),
                            barrio = repoBarrio.FindByName(dr["barrio"].ToString()),
                            descripcion = dr["descripcion"].ToString(),
                            nro_banios = Convert.ToInt32(dr["nro_banios"]),
                            nro_dormitorios = Convert.ToInt32(dr["nro_dormitorios"]),
                            superficie = Convert.ToDouble(dr["superficie"]),
                            precio_base = Convert.ToDouble(dr["precio_base"]),
                            anio_construccion = Convert.ToInt32(dr["anio_construccion"]),
                            vendida = ConvertCharToBoolean(Convert.ToChar(dr["vendida"].ToString())),
                            habilitada = ConvertCharToBoolean(Convert.ToChar(dr["habilitada"].ToString())),
                            id = Convert.ToInt32(dr["id"]),
                            precio_final = Convert.ToDouble(dr["precio_base"]),
                            tipo = Convert.ToInt32(dr["tipo"]),
                            contribucion = Convert.ToDouble(dr["contribucion"])
                        });
                    }
                }

                dr.Close();
                query = @"SELECT * 
                          FROM VIVIENDA V INNER JOIN VNUEVA VN ON V.id = VN.vivienda;";
                cmd = new SqlCommand(query, cn, trn);
                dr = cmd.ExecuteReader();

                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        listaViviendas.Add(new VNueva
                        {
                            calle = dr["calle"].ToString(),
                            nro_puerta = Convert.ToInt32(dr["nro_puerta"]),
                            barrio = repoBarrio.FindByName(dr["barrio"].ToString()),
                            descripcion = dr["descripcion"].ToString(),
                            nro_banios = Convert.ToInt32(dr["nro_banios"]),
                            nro_dormitorios = Convert.ToInt32(dr["nro_dormitorios"]),
                            superficie = Convert.ToDouble(dr["superficie"]),
                            precio_base = Convert.ToDouble(dr["precio_base"]),
                            anio_construccion = Convert.ToInt32(dr["anio_construccion"]),
                            vendida = ConvertCharToBoolean(Convert.ToChar(dr["vendida"].ToString())),
                            habilitada = ConvertCharToBoolean(Convert.ToChar(dr["habilitada"].ToString())),
                            id = Convert.ToInt32(dr["id"]),
                            precio_final = Convert.ToDouble(dr["precio_base"]),
                            tipo = Convert.ToInt32(dr["tipo"])
                        });
                    }
                }
            }
            catch (SqlException e)
            {
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return listaViviendas;
        }

        public IEnumerable<Vivienda> FindByLocation(Barrio b)
        {
            List<Vivienda> listaViviendas = new List<Vivienda>();
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                String query = @"SELECT * 
                                FROM VIVIENDA V INNER JOIN VUSADA VU ON V.id = VU.vivienda
                                WHERE V.barrio = @barrio;";

                SqlCommand cmd = new SqlCommand(query, cn, trn);
                cmd.Parameters.Add(new SqlParameter("@barrio", b.nombre));
                SqlDataReader dr = cmd.ExecuteReader();

                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        listaViviendas.Add(new VUsada
                        {
                            calle = dr["calle"].ToString(),
                            nro_puerta = Convert.ToInt32(dr["nro_puerta"]),
                            barrio = repoBarrio.FindByName(dr["barrio"].ToString()),
                            descripcion = dr["descripcion"].ToString(),
                            nro_banios = Convert.ToInt32(dr["nro_banios"]),
                            nro_dormitorios = Convert.ToInt32(dr["nro_dormitorios"]),
                            superficie = Convert.ToDouble(dr["superficie"]),
                            precio_base = Convert.ToDouble(dr["precio_base"]),
                            anio_construccion = Convert.ToInt32(dr["anio_construccion"]),
                            vendida = ConvertCharToBoolean(Convert.ToChar(dr["vendida"].ToString())),
                            habilitada = ConvertCharToBoolean(Convert.ToChar(dr["habilitada"].ToString())),
                            id = Convert.ToInt32(dr["id"]),
                            precio_final = Convert.ToDouble(dr["precio_base"]),
                            tipo = Convert.ToInt32(dr["tipo"]),
                            contribucion = Convert.ToDouble(dr["contribucion"])
                        });
                    }
                }

                dr.Close();
                query = @"SELECT * 
                          FROM VIVIENDA V INNER JOIN VNUEVA VN ON V.id = VN.vivienda
                          WHERE V.barrio = @barrio;";
                cmd = new SqlCommand(query, cn, trn);
                cmd.Parameters.Add(new SqlParameter("@barrio", b.nombre));
                dr = cmd.ExecuteReader();

                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        listaViviendas.Add(new VNueva
                        {
                            calle = dr["calle"].ToString(),
                            nro_puerta = Convert.ToInt32(dr["nro_puerta"]),
                            barrio = repoBarrio.FindByName(dr["barrio"].ToString()),
                            descripcion = dr["descripcion"].ToString(),
                            nro_banios = Convert.ToInt32(dr["nro_banios"]),
                            nro_dormitorios = Convert.ToInt32(dr["nro_dormitorios"]),
                            superficie = Convert.ToDouble(dr["superficie"]),
                            precio_base = Convert.ToDouble(dr["precio_base"]),
                            anio_construccion = Convert.ToInt32(dr["anio_construccion"]),
                            vendida = ConvertCharToBoolean(Convert.ToChar(dr["vendida"].ToString())),
                            habilitada = ConvertCharToBoolean(Convert.ToChar(dr["habilitada"].ToString())),
                            id = Convert.ToInt32(dr["id"]),
                            precio_final = Convert.ToDouble(dr["precio_base"]),
                            tipo = Convert.ToInt32(dr["tipo"])
                        });
                    }
                }
            }
            catch (SqlException e)
            {
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return listaViviendas;
        }

        public Vivienda FindById(int id)
        {
            Vivienda v = null;
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                String query = @"SELECT * 
                                FROM VIVIENDA V INNER JOIN VUSADA VU ON V.id = VU.vivienda
                                WHERE V.id = @id;";

                SqlCommand cmd = new SqlCommand(query, cn, trn);
                cmd.Parameters.Add(new SqlParameter("@id", id));

                /* [-1 --> No Existe; 0 --> Nueva; 1 --> Usada] */
                

                SqlDataReader dr = cmd.ExecuteReader();

                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        v = new VUsada
                        {
                            calle = dr["calle"].ToString(),
                            nro_puerta = Convert.ToInt32(dr["nro_puerta"]),
                            barrio = repoBarrio.FindByName(dr["barrio"].ToString()),
                            descripcion = dr["descripcion"].ToString(),
                            nro_banios = Convert.ToInt32(dr["nro_banios"]),
                            nro_dormitorios = Convert.ToInt32(dr["nro_dormitorios"]),
                            superficie = Convert.ToDouble(dr["superficie"]),
                            precio_base = Convert.ToDouble(dr["precio_base"]),
                            anio_construccion = Convert.ToInt32(dr["anio_construccion"]),
                            vendida = ConvertCharToBoolean(Convert.ToChar(dr["vendida"].ToString())),
                            habilitada = ConvertCharToBoolean(Convert.ToChar(dr["habilitada"].ToString())),
                            id = Convert.ToInt32(dr["id"]),
                            precio_final = Convert.ToDouble(dr["precio_base"]),
                            tipo = Convert.ToInt32(dr["tipo"]),
                            contribucion = Convert.ToDouble(dr["contribucion"])
                        };
                    }
                }

                dr.Close();
                query = @"SELECT * 
                          FROM VIVIENDA V INNER JOIN VNUEVA VN ON V.id = VN.vivienda
                          WHERE V.id = @id;";
                cmd = new SqlCommand(query, cn, trn);
                cmd.Parameters.Add(new SqlParameter("@id", id));
                dr = cmd.ExecuteReader();

                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        v = new VNueva
                        {
                            calle = dr["calle"].ToString(),
                            nro_puerta = Convert.ToInt32(dr["nro_puerta"]),
                            barrio = repoBarrio.FindByName(dr["barrio"].ToString()),
                            descripcion = dr["descripcion"].ToString(),
                            nro_banios = Convert.ToInt32(dr["nro_banios"]),
                            nro_dormitorios = Convert.ToInt32(dr["nro_dormitorios"]),
                            superficie = Convert.ToDouble(dr["superficie"]),
                            precio_base = Convert.ToDouble(dr["precio_base"]),
                            anio_construccion = Convert.ToInt32(dr["anio_construccion"]),
                            vendida = ConvertCharToBoolean(Convert.ToChar(dr["vendida"].ToString())),
                            habilitada = ConvertCharToBoolean(Convert.ToChar(dr["habilitada"].ToString())),
                            id = Convert.ToInt32(dr["id"]),
                            precio_final = Convert.ToDouble(dr["precio_base"]),
                            tipo = Convert.ToInt32(dr["tipo"])
                        };
                    }
                }
            }
            catch (SqlException e)
            {
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return v;
        }

        public Boolean GenerateReports()
        {
            Boolean flag = false;

            try
            {
                var lista = FindAll();
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(@"..\..\..\..\Archivos\Viviendas.txt"))
                {
                    foreach (Vivienda v in lista)
                    {
                        file.WriteLine(v.DatosReporte());
                    }
                }

                flag = true;
            }
            catch (Exception e)
            {
                flag = false;
                Console.WriteLine("Error " + e.Message);
            }
            return flag;
        }

        public Boolean Update(Vivienda vi)
        {
            return vi != null && vi.Modificar();
        }

        private Boolean ConvertCharToBoolean(char d)
        {
            return d == '1' ? true : false;
        }
    }
}



// UtilidadesDB
using System;
using System.Configuration;
using System.Data.SqlClient;

namespace Solucion_Habitacional.Dominio.Utilidades
{
    public class UtilidadesDB
    {

        private static string CadenaConexion = ConfigurationManager.ConnectionStrings["Solucion_Habitacional_P"].ConnectionString;

        public static SqlConnection CreateConnection()
        {
            SqlConnection cn = new SqlConnection(CadenaConexion);
            return cn;
        }

        public static Boolean OpenConnection(SqlConnection cn)
        {
            if (cn.State != System.Data.ConnectionState.Open)
            {
                cn.Open();
                return true;
            }
            return false;
        }

        public static Boolean CloseConnection(SqlConnection cn)
        {
            if (cn.State == System.Data.ConnectionState.Open)
            {
                cn.Close();
                return true;
            }
            return false;
        }
    }
}



// Barrio
using System;
using System.Data.SqlClient;
using System.Data;
using Solucion_Habitacional.Dominio.Utilidades;

namespace Solucion_Habitacional.Dominio
{
    public class Barrio : IEquatable<Barrio>, IActiveRecord 
    {
        public string nombre { get; set; }
        public string descripcion { get; set; }

        public Boolean Validar ()
        {
            return nombre != null && descripcion != null && nombre.Length > 0 && descripcion.Length > 0;
        }

        public Boolean Equals (Barrio other)
        {
            return other != null && this.nombre == other.nombre;
        }

        public override string ToString ()
        {
            return "Nombre: " + nombre + " - Descripción: " + descripcion;
        }

        public Boolean Insertar ()
        {
            Boolean flag = false;
            String query = @"Insert_Barrio";
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                SqlCommand cmd = new SqlCommand(query, cn, trn);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@nombre", nombre));
                cmd.Parameters.Add(new SqlParameter("@descripcion", descripcion));
                flag = (int)cmd.ExecuteScalar() == 1;
                trn.Commit();
            }
            catch (SqlException e)
            {
                trn.Rollback();
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error" + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return flag;
        }

        public Boolean Eliminar()
        {
            Boolean flag = false;
            String stringCommand = @"Delete_Barrio";

            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                SqlCommand cmd = new SqlCommand(stringCommand, cn, trn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@nombre", nombre));
                flag = (int)cmd.ExecuteScalar() == 1;
                trn.Commit();
            }
            catch (SqlException ex)
            {
                trn.Rollback();
                Console.WriteLine("Error al Eliminar " + ex.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Otro Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }
            return flag;
        }

        public Boolean Modificar()
        {
            Boolean flag = false;
            String query = @"Update_Barrio";
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                SqlCommand cmd = new SqlCommand(query, cn, trn);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@nombre", nombre));
                cmd.Parameters.Add(new SqlParameter("@descripcion", descripcion));

                flag = (int)cmd.ExecuteScalar() == 1;
                trn.Commit();
            }
            catch (SqlException e)
            {
                trn.Rollback();
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return flag;
        }

    }
}



// IActiveRecord
using System;

namespace Solucion_Habitacional.Dominio
{
    interface IActiveRecord
    {
        Boolean Insertar();

        Boolean Eliminar();

        Boolean Modificar();

    }
}



// Parametro
using System;
using System.Data;
using Solucion_Habitacional.Dominio.Utilidades;
using System.Data.SqlClient;
using System.Diagnostics;

namespace Solucion_Habitacional.Dominio
{
    public class Parametro : IEquatable<Parametro>, IActiveRecord
    {
        public String nombre { get; set; }
        public String valor { get; set; }

        public Boolean Eliminar()
        {
            Boolean flag = false;
            String stringCommand = @"Delete_Parametro";

            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                SqlCommand cmd = new SqlCommand(stringCommand, cn, trn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@nombre", nombre));
                flag = (int)cmd.ExecuteScalar() == 1;
                trn.Commit();
            }
            catch (SqlException ex)
            {
                trn.Rollback();
                Debug.WriteLine("Error al Eliminar " + ex.Message);
            }
            catch (Exception ex)
            {
                Debug.WriteLine("Otro Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }
            return flag;
        }

        public Boolean Equals(Parametro other)
        {
            return nombre == other.nombre;
        }

        public Boolean Insertar()
        {
            Boolean flag = false;
            String query = @"Insert_Parametro";
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                SqlCommand cmd = new SqlCommand(query, cn, trn);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@nombre", nombre));
                cmd.Parameters.Add(new SqlParameter("@valor", valor));
                flag = (int)cmd.ExecuteScalar() == 1;
                trn.Commit();
            }
            catch (SqlException e)
            {
                trn.Rollback();
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error" + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return flag;
        }

        public Boolean Modificar()
        {
            Boolean flag = false;
            String query = @"Update_Parametro";
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                SqlCommand cmd = new SqlCommand(query, cn, trn);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@nombre", nombre));
                cmd.Parameters.Add(new SqlParameter("@valor", valor));

                flag = (int)cmd.ExecuteScalar() == 1;
                trn.Commit();
            }
            catch (SqlException e)
            {
                trn.Rollback();
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return flag;
        }

        public override string ToString()
        {
            return nombre + "=" + valor;
        }

        public Boolean Validar()
        {
            return nombre != null && nombre.Length > 0;
        }
    }
}



// Pasante
using Solucion_Habitacional.Dominio.Utilidades;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

namespace Solucion_Habitacional.Dominio
{
    public class Pasante : IEquatable<Pasante>, IActiveRecord
    {

        public String user_name { get; set; }
        public String password { get; set; }


        public Boolean Eliminar()
        {
            Boolean flag = false;
            String stringCommand = @"Delete_Pasante";

            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                SqlCommand cmd = new SqlCommand(stringCommand, cn, trn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@userName", user_name));
                cmd.Parameters.Add(new SqlParameter("@userPassword", password));
                flag = (int) cmd.ExecuteScalar() == 1;
                trn.Commit();
            }
            catch (SqlException ex)
            {
                trn.Rollback();
                Debug.WriteLine("Error al Eliminar " + ex.Message);
            }
            catch (Exception ex)
            {
                Debug.WriteLine("Otro Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }
            return flag;
        }

        public Boolean Equals(Pasante other)
        {
            return user_name == other.user_name;
        }

        public Boolean Ingresar()
        {
            Boolean flag = false;
            String query = @"Ingreso_Pasante";
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);

            try
            {
                SqlCommand cmd = new SqlCommand(query, cn);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@userName", user_name));
                cmd.Parameters.Add(new SqlParameter("@userPassword", password));
                flag = (int)cmd.ExecuteScalar() == 1;   
            }
            catch (SqlException e)
            {
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return flag;

        }

        public Boolean Insertar()
        {
            Boolean flag = false;
            String query = @"Insert_Pasante";
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                SqlCommand cmd = new SqlCommand(query, cn, trn);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@userName", user_name));
                cmd.Parameters.Add(new SqlParameter("@userPassword", password));
                flag = (int) cmd.ExecuteScalar() == 1;
                trn.Commit();
            }
            catch (SqlException e)
            {
                trn.Rollback();
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error" + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return flag;
        }

        public Boolean Modificar()
        {
            Boolean flag = false;
            String query = @"Update_Pasante";
            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                SqlCommand cmd = new SqlCommand(query, cn, trn);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@userPassword", password));
                cmd.Parameters.Add(new SqlParameter("@userName", user_name));

                flag = (int) cmd.ExecuteScalar() == 1;
                trn.Commit();
            }
            catch (SqlException e)
            {
                trn.Rollback();
                Console.WriteLine("Se ha producido un error " + e.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }

            return flag;
        }

        public Boolean Validar()
        {
            return user_name != null && user_name != "" && user_name.Contains("@") && password != null && password.Length > 7;
        }

        public override string ToString()
        {
            return user_name;
        }
    }
}



// Vivienda
using Solucion_Habitacional.Dominio.Utilidades;
using System;
using System.Data;
using System.Data.SqlClient;

namespace Solucion_Habitacional.Dominio
{
    public abstract class Vivienda : IEquatable<Vivienda>, IActiveRecord
    {

        #region parameters

        public int id { get; set; }
        public String calle { get; set; }
        public int nro_puerta { get; set; }
        public Barrio barrio { get; set; }
        public String descripcion { get; set; }
        public int nro_banios { get; set; }
        public int nro_dormitorios { get; set; }
        public double superficie { get; set; }
        public double precio_base { get; set; }
        public int anio_construccion { get; set; }
        public Boolean vendida { get; set; } = false;
        public Boolean habilitada { get; set; } = false;
        public int tipo { get; set; }

        #endregion

        public virtual Boolean Validar()
        {
            return
                calle != null &&
                calle != "" &&
                nro_puerta > 0 &&
                barrio != null &&
                descripcion != null &&
                nro_banios >= 0 &&
                nro_dormitorios > 0 &&
                superficie > 0 &&
                precio_base > 0 &&
                anio_construccion > -10000;
        }

        public virtual Boolean Es_Nueva()
        {
            Repositorios.ADO.RepositorioParametro repoParam = new Repositorios.ADO.RepositorioParametro();
            Parametro p = repoParam.FindByName("tope_metraje_vnueva");
            int current_year = DateTime.Now.Year;
            int res = Convert.ToInt16(repoParam.FindByName("anio_nueva").valor) | 2;

            return current_year - anio_construccion <= res && Convert.ToDouble(p.valor) > superficie;
        }

        public abstract double CalcularPrecio();

        public abstract Boolean Insertar();

        protected Boolean AuxInsertar(SqlTransaction trn, SqlConnection cn)
        {
            Boolean flag = false;

            String query = @"Insert_Vivienda";
            SqlCommand cmd = new SqlCommand(query, cn, trn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.Add(new SqlParameter("@calle", calle));
            cmd.Parameters.Add(new SqlParameter("@nro_puerta", nro_puerta));
            cmd.Parameters.Add(new SqlParameter("@descripcion", descripcion));
            cmd.Parameters.Add(new SqlParameter("@nro_banios", nro_banios));
            cmd.Parameters.Add(new SqlParameter("@nro_dormitorios", nro_dormitorios));
            cmd.Parameters.Add(new SqlParameter("@superficie", superficie));
            cmd.Parameters.Add(new SqlParameter("@anio_construccion", anio_construccion));
            cmd.Parameters.Add(new SqlParameter("@precio_base", precio_base));
            cmd.Parameters.Add(new SqlParameter("@habilitada", convertBooleanToChar(habilitada)));
            cmd.Parameters.Add(new SqlParameter("@vendida", convertBooleanToChar(vendida)));
            cmd.Parameters.Add(new SqlParameter("@barrio", barrio.nombre));
            cmd.Parameters.Add(new SqlParameter("@tipo", tipo));

            id = (int)cmd.ExecuteScalar();

            flag = id > 0;

            return flag;
        }

        public abstract Boolean Modificar();

        public Boolean Eliminar()
        {
            Boolean flag = false;
            String stringCommand = @"Delete_Vivienda";

            SqlConnection cn = UtilidadesDB.CreateConnection();
            UtilidadesDB.OpenConnection(cn);
            SqlTransaction trn = cn.BeginTransaction();

            try
            {
                SqlCommand cmd = new SqlCommand(stringCommand, cn, trn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@id", id));
                flag = (int)cmd.ExecuteScalar() == 1;
                trn.Commit();
            }
            catch (SqlException ex)
            {
                trn.Rollback();
                Console.WriteLine("Error al Eliminar " + ex.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Otro Error " + ex.Message);
            }
            finally
            {
                UtilidadesDB.CloseConnection(cn);
                cn.Dispose();
            }
            return flag;
        }

        public override string ToString()
        {
            return "\n\t\t" + "Id: " + id + "\n\t\t" + "Dirección: " + calle + " " + nro_puerta + "\n\t\t" + "Barrio: " + barrio.nombre + "\n\t\t"
                + "Descripción: " + descripcion + "\n\t\t" + "Cantidad de baños: " + nro_banios + "\n\t\t"
                + "Cantidad de dormitorios: " + nro_dormitorios + "\n\t\t" + "Superficie: " + superficie + "\n\t\t" + "Precio base: " + precio_base + "\n\t\t"
                + "Año de construcción: " + anio_construccion + "\n\t\t" + "Vendida: " + (vendida ? "Si" : "No") + "\n\t\t"
                + "Habilitada: " + (habilitada ? "Si" : "No");
        }

        protected char convertBooleanToChar(Boolean d)
        {
            return d ? '1' : '0';
        }

        public Boolean Equals(Vivienda other)
        {
            return id == other.id;
        }

        public abstract String DatosReporte();
    }
}



// VNueva
using Solucion_Habitacional.Dominio.Utilidades;
using System;
using System.Data;
using System.Data.SqlClient;

namespace Solucion_Habitacional.Dominio
{
    public class VNueva : Vivienda
    {

        public double precio_final { get; set; }

        public override Double CalcularPrecio()
        {
            Repositorios.ADO.RepositorioParametro rp = new Repositorios.ADO.RepositorioParametro();
            double cf = precio_base * Math.Pow((1 + Convert.ToDouble(rp.FindByName("interes").valor) / 100), Convert.ToDouble(rp.FindByName("plazo_fijo_vusada").valor));

            cf += cf * (Convert.ToDouble(rp.FindByName("itp").valor) / 100);

            return cf;
        }

        public override Boolean Insertar()
        {
            Boolean flag = false;

            if (base.Es_Nueva())
            {
                String query = @"Insert_VNUEVA";
                SqlConnection cn = UtilidadesDB.CreateConnection();
                UtilidadesDB.OpenConnection(cn);
                SqlTransaction trn = cn.BeginTransaction();

                try
                {
                    flag = base.AuxInsertar(trn, cn);

                    if (flag)
                    {
                        SqlCommand cmd = new SqlCommand(query, cn, trn);
                        cmd.CommandType = CommandType.StoredProcedure;
                        precio_final = CalcularPrecio();


                        cmd.Parameters.Add(new SqlParameter("@id", id));
                        cmd.Parameters.Add(new SqlParameter("@precio_final", precio_final));

                        flag = (int)cmd.ExecuteScalar() > 0;

                        trn.Commit();

                    }
                }
                catch (SqlException e)
                {
                    trn.Rollback();
                    Console.WriteLine("Se ha producido un error " + e.Message);
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error" + ex.Message);
                }
                finally
                {
                    UtilidadesDB.CloseConnection(cn);
                    cn.Dispose();
                }
            }

            return flag;
        }

        public override Boolean Modificar()
        {
            Boolean flag = false;

            if (base.Es_Nueva())
            {
                String query = @"Update_Vivienda";
                SqlConnection cn = UtilidadesDB.CreateConnection();
                UtilidadesDB.OpenConnection(cn);
                SqlTransaction trn = cn.BeginTransaction();
                precio_final = CalcularPrecio();

                try
                {
                    SqlCommand cmd = new SqlCommand(query, cn, trn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(new SqlParameter("@id", id));
                    cmd.Parameters.Add(new SqlParameter("@calle", calle));
                    cmd.Parameters.Add(new SqlParameter("@nro_puerta", nro_puerta));
                    cmd.Parameters.Add(new SqlParameter("@descripcion", descripcion));
                    cmd.Parameters.Add(new SqlParameter("@nro_banios", nro_banios));
                    cmd.Parameters.Add(new SqlParameter("@nro_dormitorios", nro_dormitorios));
                    cmd.Parameters.Add(new SqlParameter("@superficie", superficie));
                    cmd.Parameters.Add(new SqlParameter("@anio_construccion", anio_construccion));
                    cmd.Parameters.Add(new SqlParameter("@precio_base", precio_base));
                    cmd.Parameters.Add(new SqlParameter("@habilitada", convertBooleanToChar(habilitada)));
                    cmd.Parameters.Add(new SqlParameter("@vendida", convertBooleanToChar(vendida)));
                    cmd.Parameters.Add(new SqlParameter("@barrio", barrio.nombre));
                    cmd.Parameters.Add(new SqlParameter("@precio_final", precio_final));

                    flag = (int)cmd.ExecuteScalar() == 1;

                    trn.Commit();

                }
                catch (SqlException e)
                {
                    trn.Rollback();
                    Console.WriteLine("Se ha producido un error " + e.Message);
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error" + ex.Message);
                }
                finally
                {
                    UtilidadesDB.CloseConnection(cn);
                    cn.Dispose();
                }
            }

            return flag;
        }

        public override String ToString()
        {
            return base.ToString()
                + "\n\t\t" + "Precio final: " + precio_final;
        }

        public override String DatosReporte()
        {
            return id + "#" + calle + "#" + nro_puerta + "#" + barrio.nombre + "#" + descripcion
                   + "#" + nro_banios + "#" + nro_dormitorios + "#" + superficie + "#" + anio_construccion + "#" + precio_final
                   + "#Nueva";
        }
    }
}



// VUsada
using Solucion_Habitacional.Dominio.Utilidades;
using System;
using System.Data;
using System.Data.SqlClient;

namespace Solucion_Habitacional.Dominio
{
    public class VUsada : Vivienda
    {
        public double contribucion { get; set; }
        public double precio_final { get; set; }

        public override double CalcularPrecio()
        {
            Repositorios.ADO.RepositorioParametro rp = new Repositorios.ADO.RepositorioParametro();
            double cf = precio_base * Math.Pow((1 + Convert.ToDouble(rp.FindByName("interes").valor) / 100), Convert.ToDouble(rp.FindByName("plazo_fijo_vusada").valor));

            cf += cf * (Convert.ToDouble(rp.FindByName("itp").valor) / 100);
            contribucion = cf * (Convert.ToDouble(rp.FindByName("contribucion").valor) / 100);
            return cf;
        }

        public override Boolean Insertar()
        {
            Boolean flag = false;

            if (!base.Es_Nueva())
            {
                String query = @"Insert_VUSADA";
                SqlConnection cn = UtilidadesDB.CreateConnection();
                UtilidadesDB.OpenConnection(cn);
                SqlTransaction trn = cn.BeginTransaction();

                try
                {
                    flag = base.AuxInsertar(trn, cn);

                    if (flag)
                    {
                        SqlCommand cmd = new SqlCommand(query, cn, trn);
                        cmd.CommandType = CommandType.StoredProcedure;
                        precio_final = CalcularPrecio();
                        cmd.Parameters.Add(new SqlParameter("@id", id));
                        cmd.Parameters.Add(new SqlParameter("@precio_final", precio_final));
                        cmd.Parameters.Add(new SqlParameter("@contribucion", contribucion));

                        flag = (int)cmd.ExecuteScalar() > 0;

                        trn.Commit();

                    }
                }
                catch (SqlException e)
                {
                    trn.Rollback();
                    Console.WriteLine("Se ha producido un error " + e.Message);
                }
                catch (Exception ex)
                {
                    //Console.WriteLine("Error" + ex.Message); // Connection is no longer usable, but it saves the object into database
                }
                finally
                {
                    UtilidadesDB.CloseConnection(cn);
                    cn.Dispose();
                }
            }

            return flag;
        }

        public override Boolean Modificar()
        {
            Boolean flag = false;

            if (!base.Es_Nueva())
            {
                String query = @"Update_Vivienda";
                SqlConnection cn = UtilidadesDB.CreateConnection();
                UtilidadesDB.OpenConnection(cn);
                SqlTransaction trn = cn.BeginTransaction();
                precio_final = CalcularPrecio();

                try
                {
                    SqlCommand cmd = new SqlCommand(query, cn, trn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(new SqlParameter("@id", id));
                    cmd.Parameters.Add(new SqlParameter("@calle", calle));
                    cmd.Parameters.Add(new SqlParameter("@nro_puerta", nro_puerta));
                    cmd.Parameters.Add(new SqlParameter("@descripcion", descripcion));
                    cmd.Parameters.Add(new SqlParameter("@nro_banios", nro_banios));
                    cmd.Parameters.Add(new SqlParameter("@nro_dormitorios", nro_dormitorios));
                    cmd.Parameters.Add(new SqlParameter("@superficie", superficie));
                    cmd.Parameters.Add(new SqlParameter("@anio_construccion", anio_construccion));
                    cmd.Parameters.Add(new SqlParameter("@precio_base", precio_base));
                    cmd.Parameters.Add(new SqlParameter("@habilitada", convertBooleanToChar(habilitada)));
                    cmd.Parameters.Add(new SqlParameter("@vendida", convertBooleanToChar(vendida)));
                    cmd.Parameters.Add(new SqlParameter("@barrio", barrio.nombre));
                    cmd.Parameters.Add(new SqlParameter("@precio_final", precio_final));
                    cmd.Parameters.Add(new SqlParameter("@contribucion", contribucion));
                    cmd.Parameters.Add(new SqlParameter("@tipo", tipo));
                    flag = (int)cmd.ExecuteScalar() == 1;

                    trn.Commit();

                }
                catch (SqlException e)
                {
                    trn.Rollback();
                    Console.WriteLine("Se ha producido un error " + e.Message);
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error" + ex.Message);
                }
                finally
                {
                    UtilidadesDB.CloseConnection(cn);
                    cn.Dispose();
                }
            }

            return flag;
        }

        public override string ToString()
        {
            return base.ToString()
                + "\n\t\t" + "Contribución: " + contribucion + "\n\t\t" + "Precio final: " + precio_final;
        }

        public override String DatosReporte()
        {
            return id + "#" + calle + "#" + nro_puerta + "#" + barrio.nombre + "#" + descripcion
                   + "#" + nro_banios + "#" + nro_dormitorios + "#" + superficie + "#" + anio_construccion + "#" + precio_final
                   + "#" + contribucion + "#Usada";
        }
    }
}




// ObjectConversor
using Solucion_Habitacional.Dominio;
using System.Collections.Generic;
using System.Linq;

namespace Solucion_Habitacional.Servicio
{
    public class ObjectConversor
    {

        #region Barrio
        public static Barrio ConvertToBarrio(DtoBarrio dto_barrio)
        {
            Barrio b = null;

            if (dto_barrio != null)
            {
                b = new Barrio {
                    nombre = dto_barrio.name,
                    descripcion = dto_barrio.description
                };
                
            }

            return b;
        }

        public static DtoBarrio ConvertToDtoBarrio(Barrio barrio)
        {
            DtoBarrio dto_barrio = null;

            if (barrio != null)
            {
                dto_barrio = new DtoBarrio
                {
                    name = barrio.nombre,
                    description = barrio.descripcion
                };
            }

            return dto_barrio;
        }

        public static IEnumerable<DtoBarrio> ConvertToDtoBarrio(IEnumerable<Barrio> barrios)
        {
            List<DtoBarrio> dto_barrios = new List<DtoBarrio>();

            if (barrios.Count() > 0)
            {
                foreach (Barrio b in barrios) {
                    dto_barrios.Add(new DtoBarrio
                    {
                        name = b.nombre,
                        description = b.descripcion
                    });
                }
            }

            return dto_barrios;
        }
        #endregion


        #region Parametro

        public static Parametro ConvertToParametro(DtoParametro dto_parametro)
        {
            Parametro p = null;

            if (dto_parametro != null)
            {
                p = new Parametro
                {
                    nombre = dto_parametro.name,
                    valor = dto_parametro.value
                };

            }

            return p;
        }

        public static DtoParametro ConvertToDtoParametro(Parametro p)
        {
            DtoParametro dto_parametro = null;

            if (p != null)
            {
                dto_parametro = new DtoParametro
                {
                    name = p.nombre,
                    value = p.valor
                };
            }

            return dto_parametro;
        }

        public static IEnumerable<DtoParametro> ConvertToDtoParametro(IEnumerable<Parametro> parametros)
        {
            List<DtoParametro> dto_parametros = new List<DtoParametro>();

            if (parametros.Count() > 0)
            {
                foreach (Parametro p in parametros)
                {
                    dto_parametros.Add(new DtoParametro
                    {
                        name = p.nombre,
                        value = p.valor
                    });
                }
            }

            return dto_parametros;
        }

        #endregion


        #region Pasante

        public static Pasante ConvertToPasante(DtoPasante dto_pasante)
        {
            Pasante p = null;

            if (dto_pasante != null)
            {
                p = new Pasante
                {
                    user_name = dto_pasante.user_name,
                    password = dto_pasante.password
                };

            }

            return p;
        }

        public static DtoPasante ConvertToDtoPasante(Pasante p)
        {
            DtoPasante dto_pasante = null;

            if (p != null)
            {
                dto_pasante = new DtoPasante
                {
                    user_name = p.user_name,
                    password = p.password
                };
            }

            return dto_pasante;
        }

        public static IEnumerable<DtoPasante> ConvertToDtoPasante(IEnumerable<Pasante> pasantes)
        {
            List<DtoPasante> dto_pasantes = new List<DtoPasante>();

            if (pasantes.Count() > 0)
            {
                foreach (Pasante p in pasantes)
                {
                    dto_pasantes.Add(new DtoPasante
                    {
                        user_name = p.user_name,
                        password = p.password
                    });
                }
            }

            return dto_pasantes;
        }

        #endregion


        #region Vivienda

        public static Vivienda ConvertToVivienda(DtoVivienda dto_vivienda)
        {
            Vivienda v = null;

            if (dto_vivienda != null)
            {
                if (dto_vivienda.tipo == 0)
                {
                    DtoVNueva vn = (DtoVNueva)dto_vivienda;

                    v = new VNueva
                    {
                        calle = vn.calle,
                        nro_puerta = vn.nro_puerta,
                        barrio = ConvertToBarrio(vn.barrio),
                        descripcion = vn.descripcion,
                        nro_banios = vn.nro_banios,
                        nro_dormitorios = vn.nro_dormitorios,
                        superficie = vn.superficie,
                        precio_base = vn.precio_base,
                        anio_construccion = vn.anio_construccion,
                        vendida = vn.vendida,
                        habilitada = vn.habilitada,
                        precio_final = vn.precio_final,
                        tipo = vn.tipo,
                        id = vn.id
                    };
                } else if (dto_vivienda.tipo == 1)
                {
                    DtoVUsada vu = (DtoVUsada)dto_vivienda;

                    v = new VUsada
                    {
                        calle = vu.calle,
                        nro_puerta = vu.nro_puerta,
                        barrio = ConvertToBarrio(vu.barrio),
                        descripcion = vu.descripcion,
                        nro_banios = vu.nro_banios,
                        nro_dormitorios = vu.nro_dormitorios,
                        superficie = vu.superficie,
                        precio_base = vu.precio_base,
                        anio_construccion = vu.anio_construccion,
                        vendida = vu.vendida,
                        habilitada = vu.habilitada,
                        precio_final = vu.precio_final,
                        tipo = vu.tipo,
                        contribucion = vu.contribucion,
                        id = vu.id
                    };
                }
                

            }

            return v;
        }

        public static DtoVivienda ConvertToDtoVivienda(Vivienda v)
        {
            DtoVivienda dto_vivienda = null;

            if (v != null)
            {
                if (v.tipo == 0)
                {
                    VNueva vn = (VNueva)v;

                    dto_vivienda = new DtoVNueva
                    {
                        calle = vn.calle,
                        nro_puerta = vn.nro_puerta,
                        barrio = ConvertToDtoBarrio(vn.barrio),
                        descripcion = vn.descripcion,
                        nro_banios = vn.nro_banios,
                        nro_dormitorios = vn.nro_dormitorios,
                        superficie = vn.superficie,
                        precio_base = vn.precio_base,
                        anio_construccion = vn.anio_construccion,
                        vendida = vn.vendida,
                        habilitada = vn.habilitada,
                        precio_final = vn.precio_final,
                        tipo = vn.tipo,
                        id = vn.id
                    };
                } else if (v.tipo == 1)
                {
                    VUsada vu = (VUsada)v;

                    dto_vivienda = new DtoVUsada
                    {
                        calle = vu.calle,
                        nro_puerta = vu.nro_puerta,
                        barrio = ConvertToDtoBarrio(vu.barrio),
                        descripcion = vu.descripcion,
                        nro_banios = vu.nro_banios,
                        nro_dormitorios = vu.nro_dormitorios,
                        superficie = vu.superficie,
                        precio_base = vu.precio_base,
                        anio_construccion = vu.anio_construccion,
                        vendida = vu.vendida,
                        habilitada = vu.habilitada,
                        precio_final = vu.precio_final,
                        tipo = vu.tipo,
                        contribucion = vu.contribucion,
                        id = vu.id
                    };
                }

            }

            return dto_vivienda;
        }

        public static IEnumerable<DtoVivienda> ConvertToDtoVivienda(IEnumerable<Vivienda> viviendas)
        {
            List<DtoVivienda> dto_viviendas = new List<DtoVivienda>();

            if (viviendas.Count() > 0)
            {
                foreach (Vivienda v in viviendas)
                {
                    if (v.tipo == 0)
                    {
                        VNueva vn = (VNueva)v;
                        dto_viviendas.Add(new DtoVNueva
                        {
                            calle = vn.calle,
                            nro_puerta = vn.nro_puerta,
                            barrio = ConvertToDtoBarrio(vn.barrio),
                            descripcion = vn.descripcion,
                            nro_banios = vn.nro_banios,
                            nro_dormitorios = vn.nro_dormitorios,
                            superficie = vn.superficie,
                            precio_base = vn.precio_base,
                            anio_construccion = vn.anio_construccion,
                            vendida = vn.vendida,
                            habilitada = vn.habilitada,
                            precio_final = vn.precio_final,
                            tipo = vn.tipo,
                            id = vn.id
                        });
                    } else if (v.tipo == 1)
                    {
                        VUsada vu = (VUsada)v;
                        dto_viviendas.Add(new DtoVUsada
                        {
                            calle = vu.calle,
                            nro_puerta = vu.nro_puerta,
                            barrio = ConvertToDtoBarrio(vu.barrio),
                            descripcion = vu.descripcion,
                            nro_banios = vu.nro_banios,
                            nro_dormitorios = vu.nro_dormitorios,
                            superficie = vu.superficie,
                            precio_base = vu.precio_base,
                            anio_construccion = vu.anio_construccion,
                            vendida = vu.vendida,
                            habilitada = vu.habilitada,
                            precio_final = vu.precio_final,
                            tipo = vu.tipo,
                            contribucion = vu.contribucion,
                            id = vu.id
                        });
                    }
                }
            }

            return dto_viviendas;
        }

        #endregion

    }
}



// IServicioBarrio
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;

namespace Solucion_Habitacional.Servicio
{

    [ServiceContract]
    public interface IServicioBarrio
    {
        [OperationContract]
        Boolean Agregar(String name, String description);

        [OperationContract]
        Boolean Eliminar(String name);

        [OperationContract]
        Boolean Modificar(String name, String description);

        [OperationContract]
        IEnumerable<DtoBarrio> ObtenerTodos();

        [OperationContract]
        DtoBarrio GetBarrio(String name);

        [OperationContract]
        Boolean GenerateReport();
    }


    [DataContract]
    public class DtoBarrio
    {

        [DataMember]
        public String name { get; set; }

        [DataMember]
        public String description { get; set; }

        [OperationContract]
        public override string ToString()
        {
            return "Nombre: " + name + " - Descripción: " + description;
        }
    }
}



// IServicioParametro
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;

namespace Solucion_Habitacional.Servicio
{
    [ServiceContract]
    public interface IServicioParametro
    {
        [OperationContract]
        Boolean Agregar(String name, String value);

        [OperationContract]
        Boolean Modificar(String name, String value);

        [OperationContract]
        Boolean Eliminar(String name);

        [OperationContract]
        IEnumerable<DtoParametro> ObtenerTodos();

        [OperationContract]
        DtoParametro GetParametro(String name);

        [OperationContract]
        Boolean GenerateReport();
    }

    [DataContract]
    public class DtoParametro
    {

        [DataMember]
        public String name { get; set; }

        [DataMember]
        public String value { get; set; }

        [OperationContract]
        public override string ToString()
        {
            return name + "=" + value;
        }
    }
}



// IServicioPasante
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;

namespace Solucion_Habitacional.Servicio
{

    [ServiceContract]
    public interface IServicioPasante
    {
        [OperationContract]
        Boolean Agregar(String user_name, String password);

        [OperationContract]
        Boolean Modificar(String user_name, String password);

        [OperationContract]
        Boolean Eliminar(DtoPasante p);

        [OperationContract]
        Boolean Ingresar(DtoPasante p);

        [OperationContract]
        IEnumerable<DtoPasante> ObtenerTodos();

        [OperationContract]
        DtoPasante GetPasante(String user_name);
    }

    [DataContract]
    public class DtoPasante
    {

        [DataMember]
        public String user_name { get; set; }

        [DataMember]
        public String password { get; set; }
    }
}



// IServicioVivienda
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;

namespace Solucion_Habitacional.Servicio
{
    [ServiceContract]
    public interface IServicioVivienda
    {
        [OperationContract]
        Boolean Agregar(String calle, int nro_puerta, DtoBarrio barrio, String descripcion, 
            int nro_banios, int nro_dormitorios, double superficie, double precio_base, 
            int anio_construccion, Boolean habilitada, Boolean vendida, Boolean nueva);


        [OperationContract]
        IEnumerable<DtoVivienda> FindAll();

        [OperationContract]
        IEnumerable<DtoVivienda> GetViviendas(DtoBarrio b);

        [OperationContract]
        Boolean GenerateReport();

        [OperationContract]
        Boolean Modificar(DtoVivienda v);

        [OperationContract]
        Boolean Eliminar(DtoVivienda v);

        [OperationContract]
        DtoVivienda FindById(int id);
    }

    [DataContract]
    public class DtoVivienda
    {
        #region parameters

        [DataMember]
        public int id { get; set; }

        [DataMember]
        public String calle { get; set; }

        [DataMember]
        public int nro_puerta { get; set; }

        [DataMember]
        public DtoBarrio barrio { get; set; }

        [DataMember]
        public String descripcion { get; set; }

        [DataMember]
        public int nro_banios { get; set; }

        [DataMember]
        public int nro_dormitorios { get; set; }

        [DataMember]
        public double superficie { get; set; }

        [DataMember]
        public double precio_base { get; set; }

        [DataMember]
        public int anio_construccion { get; set; }

        [DataMember]
        public Boolean vendida { get; set; } = false;

        [DataMember]
        public Boolean habilitada { get; set; } = false;

        [DataMember]
        public int tipo { get; set; }
        #endregion

        [OperationContract]
        public override string ToString()
        {
            return "\n\t\t" + "Id: " + id + "\n\t\t" + "Dirección: " + calle + " " + nro_puerta + "\n\t\t" + "Barrio: " + barrio.name + "\n\t\t"
                + "Descripción: " + descripcion + "\n\t\t" + "Cantidad de baños: " + nro_banios + "\n\t\t"
                + "Cantidad de dormitorios: " + nro_dormitorios + "\n\t\t" + "Superficie: " + superficie + "\n\t\t" + "Precio base: "
                + precio_base + "\n\t\t" + "Año de construcción: " + anio_construccion + "\n\t\t" + "Vendida: " + (vendida ? "Si" : "No") + "\n\t\t"
                + "Habilitada: " + (habilitada ? "Si" : "No");
        }

    }

    [DataContract]
    public class DtoVNueva : DtoVivienda
    {
        [DataMember]
        public double precio_final { get; set; }

        [OperationContract]
        public override string ToString()
        {
            return base.ToString()
                + "\n\t\t" + "Precio final: " + precio_final;
        }

    }

    [DataContract]
    public class DtoVUsada : DtoVivienda
    {
        [DataMember]
        public double contribucion { get; set; }

        [DataMember]
        public double precio_final { get; set; }

        [OperationContract]
        public override string ToString()
        {
            return base.ToString() + "\n\t\t" + "Contribución: " + contribucion + "\n\t\t" + "Precio final: " + precio_final;
        }

    }


}



// ServicioBarrio
using System;
using System.Collections.Generic;
using Solucion_Habitacional.Dominio;
using Solucion_Habitacional.Dominio.Repositorios.ADO;

namespace Solucion_Habitacional.Servicio
{
    public class ServicioBarrio : IServicioBarrio
    {
        private RepositorioBarrio repoB = new RepositorioBarrio();

        public Boolean Agregar(String name, String description)
        {
            return repoB.Add(new Barrio
            {
                nombre = name,
                descripcion = description
            });
        }

        public bool Eliminar(string name)
        {
            return repoB.Delete(ObjectConversor.ConvertToBarrio(GetBarrio(name)));
        }

        public bool GenerateReport()
        {
            return repoB.GenerateReports();
        }

        public DtoBarrio GetBarrio(String name)
        {
            return ObjectConversor.ConvertToDtoBarrio(repoB.FindByName(name));
        }

        public Boolean Modificar(string name, string description)
        {
            return repoB.Update(new Barrio
            {
                nombre = name,
                descripcion = description
            });
        }

        public IEnumerable<DtoBarrio> ObtenerTodos()
        {
            IEnumerable<DtoBarrio> lista_dto_barrios = new List<DtoBarrio>();

            lista_dto_barrios = ObjectConversor.ConvertToDtoBarrio(repoB.FindAll());

            return lista_dto_barrios;
        }
    }
}



// ServicioParametro
using Solucion_Habitacional.Dominio;
using Solucion_Habitacional.Dominio.Repositorios.ADO;
using System;
using System.Collections.Generic;

namespace Solucion_Habitacional.Servicio
{
    public class ServicioParametro : IServicioParametro
    {
        private RepositorioParametro repoP = new RepositorioParametro();

        public Boolean Agregar(String name, String value)
        {
            return repoP.Add(new Parametro
            {
                nombre = name,
                valor = value
            });
        }

        public Boolean Eliminar(String name)
        {
            return repoP.Delete(ObjectConversor.ConvertToParametro(GetParametro(name)));
        }

        public Boolean GenerateReport()
        {
            return repoP.GenerateReports();
        }

        public DtoParametro GetParametro(String name)
        {
            return ObjectConversor.ConvertToDtoParametro(repoP.FindByName(name));
        }

        public Boolean Modificar(string name, string value)
        {
            return repoP.Update(new Parametro
            {
                nombre = name,
                valor = value
            });
        }

        public IEnumerable<DtoParametro> ObtenerTodos()
        {
            IEnumerable<DtoParametro> lista_dto_pasantes = new List<DtoParametro>();

            lista_dto_pasantes = ObjectConversor.ConvertToDtoParametro(repoP.FindAll());

            return lista_dto_pasantes;
        }
    }
}



// ServicioPasante
using System;
using System.Collections.Generic;
using Solucion_Habitacional.Dominio;
using Solucion_Habitacional.Dominio.Repositorios.ADO;

namespace Solucion_Habitacional.Servicio
{
    public class ServicePasante : IServicioPasante
    {
        private RepositorioPasante repoP = new RepositorioPasante();

        public Boolean Agregar(String user_name, String password)
        {
            return repoP.Add(new Pasante
            {
                user_name = user_name,
                password = password
            });
        }

        public Boolean Eliminar(DtoPasante p)
        {
            return repoP.Delete(ObjectConversor.ConvertToPasante(p));
        }

        public DtoPasante GetPasante(String user_name)
        {
            return ObjectConversor.ConvertToDtoPasante(repoP.FindByName(user_name));
        }

        public Boolean Ingresar(DtoPasante p)
        {
            return repoP.Ingresar(ObjectConversor.ConvertToPasante(p));
        }

        public Boolean Modificar(string user_name, string password)
        {
            return repoP.Update(new Pasante
            {
                user_name = user_name,
                password = password
            });
        }

        public IEnumerable<DtoPasante> ObtenerTodos()
        {
            IEnumerable<DtoPasante> lista_dto_pasantes = new List<DtoPasante>();

            lista_dto_pasantes = ObjectConversor.ConvertToDtoPasante(repoP.FindAll());

            return lista_dto_pasantes;
        }
    }
}



// ServicioVivienda
using Solucion_Habitacional.Dominio;
using Solucion_Habitacional.Dominio.Repositorios.ADO;
using System;
using System.Collections.Generic;

namespace Solucion_Habitacional.Servicio
{
    public class ServicioVivienda : IServicioVivienda
    {
        RepositorioVivienda repoV = new RepositorioVivienda();
        RepositorioBarrio repoB = new RepositorioBarrio();

        public bool Agregar(string calle, int nro_puerta, DtoBarrio barrio, string descripcion, int nro_banios, int nro_dormitorios, double superficie, 
            double precio_base, int anio_construccion, bool habilitada, bool vendida, bool nueva)
        {
            if (nueva)
            {
                return repoV.Add(new VNueva {
                    calle = calle,
                    nro_puerta = nro_puerta,
                    barrio = repoB.FindByName(barrio.name),
                    descripcion = descripcion,
                    nro_banios = nro_banios,
                    nro_dormitorios = nro_dormitorios,
                    superficie = superficie,
                    precio_base = precio_base,
                    anio_construccion = anio_construccion,
                    vendida = vendida,
                    habilitada = habilitada,
                    tipo = 0
                });
            } else
            {
                return repoV.Add(new VUsada
                {
                    calle = calle,
                    nro_puerta = nro_puerta,
                    barrio = repoB.FindByName(barrio.name),
                    descripcion = descripcion,
                    nro_banios = nro_banios,
                    nro_dormitorios = nro_dormitorios,
                    superficie = superficie,
                    precio_base = precio_base,
                    anio_construccion = anio_construccion,
                    vendida = vendida,
                    habilitada = habilitada,
                    tipo = 1
                });
            }
        }

        public IEnumerable<DtoVivienda> GetViviendas(DtoBarrio b)
        {
            IEnumerable<DtoVivienda> viviendas = new List<DtoVivienda>();
            List<DtoVivienda> aux_viviendas = new List<DtoVivienda>();
            
            aux_viviendas.AddRange(ObjectConversor.ConvertToDtoVivienda(repoV.FindByLocation(ObjectConversor.ConvertToBarrio(b))));

            viviendas = aux_viviendas;
            return viviendas;
        }

        public IEnumerable<DtoVivienda> FindAll()
        {
            IEnumerable<DtoVivienda> viviendas = new List<DtoVivienda>();

            viviendas = ObjectConversor.ConvertToDtoVivienda(repoV.FindAll());

            return viviendas;
        }

        public Boolean GenerateReport()
        {
            return repoV.GenerateReports();
        }

        public Boolean Modificar(DtoVivienda v)
        {
            return v != null && repoV.Update(ObjectConversor.ConvertToVivienda(v));
        }

        public Boolean Eliminar(DtoVivienda v)
        {
            return repoV.Delete(ObjectConversor.ConvertToVivienda(v));
        }

        public DtoVivienda FindById(int id)
        {
            return ObjectConversor.ConvertToDtoVivienda(repoV.FindById(id));
        }
    }
}



// Web
<?xml version="1.0"?>
<configuration>

  <appSettings>
    <add key="aspnet:UseTaskFriendlySynchronizationContext" value="true" />
  </appSettings>
  
  <system.web>
    <compilation debug="true" targetFramework="4.5" />
    <httpRuntime targetFramework="4.5" />
  </system.web>
  
  <system.serviceModel>
    <behaviors>
      <serviceBehaviors>
        <behavior>
          <!-- To avoid disclosing metadata information, set the values below to false before deployment -->
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>
          <!-- To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information -->
          <serviceDebug includeExceptionDetailInFaults="false"/>
        </behavior>
      </serviceBehaviors>
      
    </behaviors>
    
    <protocolMapping>
        <add binding="basicHttpsBinding" scheme="https" />
    </protocolMapping> 
    
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true" />
    
  </system.serviceModel>
  
  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true"/>
    <!--
        To browse web app root directory during debugging, set the value below to true.
        Set to false before deployment to avoid disclosing web app folder information.
      -->
    <directoryBrowse enabled="true"/>
  </system.webServer>

  <!-- Connection String -->
  <connectionStrings>
    <add name="Solucion_Habitacional_P" connectionString="SERVER=IGNACIO\SQLEXPRESS; DATABASE=Solucion_Habitacional; INTEGRATED SECURITY=TRUE;"/>
  </connectionStrings>
  
</configuration>
